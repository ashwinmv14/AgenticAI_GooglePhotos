import axios from 'axios'
import { useAuthStore } from '../store/authStore'

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api'

export const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// Request interceptor to add auth token
api.interceptors.request.use((config) => {
  const token = useAuthStore.getState().token
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// Response interceptor to handle auth errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      useAuthStore.getState().logout()
    }
    return Promise.reject(error)
  }
)

export interface LoginCredentials {
  email: string
  password: string
}

export interface RegisterCredentials {
  email: string
  password: string
  name: string
}

export interface Photo {
  id: string
  fileName: string
  originalUrl: string
  thumbnailUrl?: string
  latitude?: number
  longitude?: number
  location?: string
  city?: string
  country?: string
  dateTaken?: string
  aiDescription?: string
  tags: string[]
  faces: Face[]
}

export interface Face {
  id: string
  boundingBox: {
    x: number
    y: number
    width: number
    height: number
  }
  confidence: number
  faceGroup?: {
    id: string
    name?: string
  }
}

export interface PhotoCluster {
  id: string
  location: string
  latitude: number
  longitude: number
  photos: Photo[]
  dateRange: {
    start: string
    end: string
  }
}

export interface Album {
  id: string
  title: string
  description?: string
  coverPhoto?: string
  isAutoGenerated: boolean
  photoCount?: number
  albumPhotos?: {
    photo: Photo
  }[]
}

// Auth API
export const authApi = {
  login: async (credentials: LoginCredentials) => {
    const response = await api.post('/auth/login', credentials)
    return response.data
  },
  
  register: async (credentials: RegisterCredentials) => {
    const response = await api.post('/auth/register', credentials)
    return response.data
  },
}

// Photos API
export const photosApi = {
  upload: async (file: File) => {
    const formData = new FormData()
    formData.append('photo', file)
    
    const response = await api.post('/photos/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    return response.data
  },
  
  uploadBatch: async (files: File[]) => {
    const formData = new FormData()
    files.forEach(file => {
      formData.append('photos', file)
    })
    
    const response = await api.post('/photos/upload-batch', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    return response.data
  },
  
  getPhotos: async (params?: {
    page?: number
    limit?: number
    location?: string
    dateFrom?: string
    dateTo?: string
    tags?: string
  }) => {
    const response = await api.get('/photos', { params })
    return response.data
  },
  
  deletePhoto: async (id: string) => {
    const response = await api.delete(`/photos/${id}`)
    return response.data
  },
}

// Search API
export const searchApi = {
  search: async (query: string, page = 1) => {
    const response = await api.get('/search', {
      params: { q: query, page }
    })
    return response.data
  },
  
  getClusters: async (radius = 1) => {
    const response = await api.get('/search/clusters', {
      params: { radius }
    })
    return response.data
  },
  
  getTimeline: async (year?: number) => {
    const response = await api.get('/search/timeline', {
      params: { year }
    })
    return response.data
  },
}

// Albums API
export const albumsApi = {
  getAlbums: async () => {
    const response = await api.get('/albums')
    return response.data
  },
  
  createAlbum: async (albumData: {
    title: string
    description?: string
    photoIds?: string[]
  }) => {
    const response = await api.post('/albums', albumData)
    return response.data
  },
  
  autoGenerateAlbum: async (criteria: {
    title: string
    dateRange?: { start: string; end: string }
    location?: string
    tags?: string[]
    peopleIds?: string[]
  }) => {
    const response = await api.post('/albums/auto-generate', {
      title: criteria.title,
      criteria
    })
    return response.data
  },
  
  getAlbum: async (id: string) => {
    const response = await api.get(`/albums/${id}`)
    return response.data
  },
}