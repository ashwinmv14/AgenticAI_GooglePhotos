import express from 'express';
import { authenticateToken } from '../middleware/auth';
import { prisma } from '../index';
import { AuthenticatedRequest, AlbumCreationParams } from '../types';

const router = express.Router();

// Create album
router.post('/', authenticateToken, async (req: AuthenticatedRequest, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated'
      });
    }

    const { title, description, photoIds, dateRange, location, peopleIds } = req.body as AlbumCreationParams;

    const album = await prisma.album.create({
      data: {
        title,
        description,
        userId: req.user.id,
        dateRange: dateRange ? {
          start: new Date(dateRange.start),
          end: new Date(dateRange.end)
        } : null,
        location,
        peopleIds: peopleIds || []
      }
    });

    // Add photos to album if provided
    if (photoIds && photoIds.length > 0) {
      await prisma.albumPhoto.createMany({
        data: photoIds.map((photoId, index) => ({
          albumId: album.id,
          photoId,
          order: index
        }))
      });
    }

    res.status(201).json({
      success: true,
      data: album,
      message: 'Album created successfully'
    });
  } catch (error) {
    next(error);
  }
});

// Auto-generate album
router.post('/auto-generate', authenticateToken, async (req: AuthenticatedRequest, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated'
      });
    }

    const { title, criteria } = req.body;
    
    // Build filters based on criteria
    const filters: any = {
      userId: req.user.id
    };

    if (criteria.dateRange) {
      filters.dateTaken = {
        gte: new Date(criteria.dateRange.start),
        lte: new Date(criteria.dateRange.end)
      };
    }

    if (criteria.location) {
      filters.OR = [
        { location: { contains: criteria.location, mode: 'insensitive' } },
        { country: { contains: criteria.location, mode: 'insensitive' } },
        { city: { contains: criteria.location, mode: 'insensitive' } }
      ];
    }

    if (criteria.tags && criteria.tags.length > 0) {
      filters.tags = {
        hasSome: criteria.tags
      };
    }

    if (criteria.peopleIds && criteria.peopleIds.length > 0) {
      filters.faces = {
        some: {
          faceGroupId: {
            in: criteria.peopleIds
          }
        }
      };
    }

    // Find matching photos
    const photos = await prisma.photo.findMany({
      where: filters,
      orderBy: {
        dateTaken: 'asc'
      },
      take: 100 // Limit to 100 photos
    });

    if (photos.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'No photos found matching the criteria'
      });
    }

    // Create auto-generated album
    const album = await prisma.album.create({
      data: {
        title,
        description: `Auto-generated album with ${photos.length} photos`,
        userId: req.user.id,
        isAutoGenerated: true,
        dateRange: criteria.dateRange ? {
          start: new Date(criteria.dateRange.start),
          end: new Date(criteria.dateRange.end)
        } : null,
        location: criteria.location,
        peopleIds: criteria.peopleIds || [],
        coverPhoto: photos[0]?.thumbnailUrl
      }
    });

    // Add photos to album
    await prisma.albumPhoto.createMany({
      data: photos.map((photo, index) => ({
        albumId: album.id,
        photoId: photo.id,
        order: index
      }))
    });

    res.status(201).json({
      success: true,
      data: {
        ...album,
        photoCount: photos.length
      },
      message: 'Album auto-generated successfully'
    });
  } catch (error) {
    next(error);
  }
});

// Get user's albums
router.get('/', authenticateToken, async (req: AuthenticatedRequest, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated'
      });
    }

    const albums = await prisma.album.findMany({
      where: {
        userId: req.user.id
      },
      include: {
        albumPhotos: {
          include: {
            photo: {
              select: {
                id: true,
                thumbnailUrl: true,
                dateTaken: true
              }
            }
          },
          orderBy: {
            order: 'asc'
          },
          take: 4 // Preview photos
        },
        _count: {
          select: {
            albumPhotos: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    res.json({
      success: true,
      data: albums
    });
  } catch (error) {
    next(error);
  }
});

// Get album by ID
router.get('/:id', authenticateToken, async (req: AuthenticatedRequest, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated'
      });
    }

    const album = await prisma.album.findFirst({
      where: {
        id: req.params.id,
        userId: req.user.id
      },
      include: {
        albumPhotos: {
          include: {
            photo: {
              include: {
                faces: {
                  include: {
                    faceGroup: {
                      select: {
                        id: true,
                        name: true
                      }
                    }
                  }
                }
              }
            }
          },
          orderBy: {
            order: 'asc'
          }
        }
      }
    });

    if (!album) {
      return res.status(404).json({
        success: false,
        error: 'Album not found'
      });
    }

    res.json({
      success: true,
      data: album
    });
  } catch (error) {
    next(error);
  }
});

export default router;