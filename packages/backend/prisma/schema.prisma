// Prisma schema for AI Travel Memory Mapper
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  photos     Photo[]
  albums     Album[]
  faceGroups FaceGroup[]

  @@map("users")
}

model Photo {
  id          String   @id @default(cuid())
  fileName    String
  originalUrl String
  thumbnailUrl String?
  s3Key       String   @unique
  mimeType    String
  fileSize    Int
  width       Int?
  height      Int?
  
  // EXIF and location data
  latitude    Float?
  longitude   Float?
  altitude    Float?
  location    String?  // Reverse geocoded location name
  country     String?
  city        String?
  
  // Temporal data
  dateTaken   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // AI analysis results
  aiDescription String?
  tags          String[] // Array of detected objects/scenes
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  faces       Face[]
  albumPhotos AlbumPhoto[]

  @@map("photos")
}

model Face {
  id         String @id @default(cuid())
  boundingBox Json   // {x, y, width, height}
  confidence Float
  
  // Relations
  photoId     String
  photo       Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  faceGroupId String?
  faceGroup   FaceGroup? @relation(fields: [faceGroupId], references: [id])

  @@map("faces")
}

model FaceGroup {
  id          String @id @default(cuid())
  name        String? // User can name the person
  thumbnail   String? // Representative face image
  confidence  Float   @default(0.0)
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  faces  Face[]

  @@map("face_groups")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverPhoto  String?  // URL to cover photo
  isAutoGenerated Boolean @default(false)
  
  // Temporal and spatial filters used for auto-generation
  dateRange   Json?    // {start: Date, end: Date}
  location    String?  // Location filter
  peopleIds   String[] // Face group IDs
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  albumPhotos AlbumPhoto[]

  @@map("albums")
}

model AlbumPhoto {
  id      String @id @default(cuid())
  order   Int    @default(0)
  
  // Relations
  albumId String
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  photoId String
  photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  
  @@unique([albumId, photoId])
  @@map("album_photos")
}